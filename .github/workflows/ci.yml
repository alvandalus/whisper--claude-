name: CI - Tests y Calidad de Código

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    name: Tests en Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Instalar FFmpeg (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Instalar FFmpeg (macOS)
      if: runner.os == 'macOS'
      run: brew install ffmpeg

    - name: Instalar FFmpeg (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg -y

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r transcriptor-pro/requirements.txt

    - name: Ejecutar tests
      working-directory: transcriptor-pro
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        pytest tests/ -v --cov=src --cov-report=xml

    - name: Subir cobertura a Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./transcriptor-pro/coverage.xml
        fail_ci_if_error: false

  lint:
    name: Linting y Formateo
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Instalar herramientas de linting
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy

    - name: Verificar formateo con Black
      working-directory: transcriptor-pro
      run: black --check src/ tests/

    - name: Ejecutar Ruff (linter)
      working-directory: transcriptor-pro
      run: ruff check src/ tests/

    - name: Ejecutar MyPy (type checking)
      working-directory: transcriptor-pro
      run: mypy src/ --ignore-missing-imports

  security:
    name: Análisis de Seguridad
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Instalar safety
      run: pip install safety

    - name: Verificar vulnerabilidades en dependencias
      working-directory: transcriptor-pro
      run: safety check --file=requirements.txt --output=text

    - name: Ejecutar Bandit (security linter)
      run: |
        pip install bandit
        bandit -r transcriptor-pro/src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Subir reporte de Bandit
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json
